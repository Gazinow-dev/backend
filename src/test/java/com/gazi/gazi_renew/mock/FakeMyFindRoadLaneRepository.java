package com.gazi.gazi_renew.mock;

import com.gazi.gazi_renew.route.domain.MyFindRoadLane;
import com.gazi.gazi_renew.route.domain.MyFindRoadSubPath;
import com.gazi.gazi_renew.route.service.port.MyFindRoadLaneRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMyFindRoadLaneRepository implements MyFindRoadLaneRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<MyFindRoadLane> data = new ArrayList<>();


    @Override
    public Optional<MyFindRoadLane> findByMyFindRoadSubPath(MyFindRoadSubPath myFindRoadSubPath) {
        return data.stream()
                .filter(myFindRoadLane -> myFindRoadLane.getMyFindRoadSubPathId().equals(myFindRoadSubPath.getId()))
                .findAny();
    }

    @Override
    public MyFindRoadLane save(MyFindRoadLane myFindRoadLane) {
        if (myFindRoadLane.getId() == null || myFindRoadLane.getId() == 0) {
            MyFindRoadLane createMyfindRoadLane = MyFindRoadLane.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(myFindRoadLane.getName())
                    .stationCode(myFindRoadLane.getStationCode())
                    .myFindRoadSubPathId(myFindRoadLane.getMyFindRoadSubPathId())
                    .build();
            data.add(createMyfindRoadLane);
            return createMyfindRoadLane;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), myFindRoadLane.getId()));
            data.add(myFindRoadLane);
            return myFindRoadLane;
        }
    }
}
