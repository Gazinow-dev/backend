package com.gazi.gazi_renew.mock.route;

import com.gazi.gazi_renew.route.domain.MyFindRoadStation;
import com.gazi.gazi_renew.route.service.port.MyFindRoadSubwayRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeMyFindRoadSubwayRepository implements MyFindRoadSubwayRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<MyFindRoadStation> data = new ArrayList<>();
    @Override
    public void save(MyFindRoadStation myFindRoadStation) {
        if (myFindRoadStation.getId() == null || myFindRoadStation.getId() == 0) {
            MyFindRoadStation createMyFindRoadStation = MyFindRoadStation.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .index(myFindRoadStation.getIndex())
                    .stationName(myFindRoadStation.getStationName())
                    .issueList(myFindRoadStation.getIssueList())
                    .build();
            data.add(createMyFindRoadStation);
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), myFindRoadStation.getId()));
            data.add(myFindRoadStation);
        }

    }
    @Override
    public List<MyFindRoadStation> findAllByMyFindRoadSubPathId(Long myFindRoadSubPathId) {
        return data.stream()
                .filter(myFindRoadStation -> myFindRoadStation.getMyFindRoadSubPathId().equals(myFindRoadSubPathId))
                .collect(Collectors.toList());
    }

    @Override
    public void deleteAll(List<MyFindRoadStation> myFindRoadStationList) {
        Set<Long> idsToDelete = myFindRoadStationList.stream()
                .map(MyFindRoadStation::getId)
                .collect(Collectors.toSet());

        data.removeIf(myFindRoadStation -> idsToDelete.contains(myFindRoadStation.getId()));

    }
}
