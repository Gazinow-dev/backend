package com.gazi.gazi_renew.mock;

import com.gazi.gazi_renew.issue.domain.CommentLikes;
import com.gazi.gazi_renew.issue.domain.IssueComment;
import com.gazi.gazi_renew.issue.service.port.CommentLikesRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeCommentLikesRepository implements CommentLikesRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<CommentLikes> data = new ArrayList<>();
    @Override
    public boolean existByIssueCommentAndMemberId(IssueComment issueComment, Long memberId) {
        return data.stream()
                .anyMatch(like -> like.getIssueComment().getIssueCommentId().equals(issueComment.getIssueCommentId()) && like.getMemberId().equals(memberId));
    }
    @Override
    public CommentLikes save(CommentLikes commentLikes) {
        if (commentLikes.getCommentLikesId() == null || commentLikes.getCommentLikesId() == 0) {
            CommentLikes result = CommentLikes.builder()
                    .commentLikesId(autoGeneratedId.incrementAndGet())
                    .issueComment(commentLikes.getIssueComment())
                    .memberId(commentLikes.getMemberId())
                    .build();
            data.add(result);
            return result;
        } else {
            data.removeIf(existing -> Objects.equals(existing.getCommentLikesId(), commentLikes.getCommentLikesId()));
            data.add(commentLikes);
            return commentLikes;
        }
    }

    @Override
    public void deleteByCommentLikesId(Long commentLikesId) {
        data.removeIf(like -> like.getCommentLikesId().equals(commentLikesId));
    }

    @Override
    public void deleteByIssueCommentId(Long issueCommentId) {
        data.removeIf(like -> like.getIssueComment().getIssueCommentId().equals(issueCommentId));
    }

    @Override
    public int countByIssueCommentId(Long issueCommentId) {
        return (int) data.stream()
                .filter(like -> like.getIssueComment().getIssueCommentId().equals(issueCommentId))
                .count();
    }
}
