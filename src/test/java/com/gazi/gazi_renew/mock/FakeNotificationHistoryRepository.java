package com.gazi.gazi_renew.mock;

import com.gazi.gazi_renew.notification.domain.NotificationHistory;
import com.gazi.gazi_renew.notification.service.port.NotificationHistoryRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeNotificationHistoryRepository implements NotificationHistoryRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<NotificationHistory> data = new ArrayList<>();

    @Override
    public NotificationHistory save(NotificationHistory notificationHistory) {
        // 새 NotificationHistory 생성
        NotificationHistory savedHistory = NotificationHistory.builder()
                .id(autoGeneratedId.getAndIncrement())
                .memberId(notificationHistory.getMemberId())
                .issueId(notificationHistory.getIssueId())
                .notificationTitle(notificationHistory.getNotificationTitle())
                .notificationBody(notificationHistory.getNotificationBody())
                .isRead(notificationHistory.isRead())
                .startDate(notificationHistory.getStartDate())
                .build();
        data.add(savedHistory);
        return savedHistory;
    }

    @Override
    public Page<NotificationHistory> findAllByMemberId(Long memberId, Pageable pageable) {
        // memberId 기준으로 데이터 필터링 후 페이지네이션
        List<NotificationHistory> filteredList = data.stream()
                .filter(history -> history.getMemberId().equals(memberId))
                .sorted(Comparator.comparing(NotificationHistory::getStartDate).reversed())
                .collect(Collectors.toList());

        int start = (int) pageable.getOffset();
        int end = Math.min(start + pageable.getPageSize(), filteredList.size());
        List<NotificationHistory> pagedList = filteredList.subList(start, end);

        return new PageImpl<>(pagedList, pageable, filteredList.size());
    }

    @Override
    public void updateNotificationIsRead(Long id) {
        // id 기준으로 읽음 처리
        data.stream()
                .filter(history -> history.getId().equals(id))
                .findFirst()
                .ifPresent(history -> {
                    int index = data.indexOf(history);
                    data.set(index, NotificationHistory.builder()
                            .id(history.getId())
                            .memberId(history.getMemberId())
                            .issueId(history.getIssueId())
                            .notificationTitle(history.getNotificationTitle())
                            .notificationBody(history.getNotificationBody())
                            .isRead(true) // 읽음 처리
                            .startDate(history.getStartDate())
                            .build());
                });
    }
}
