package com.gazi.gazi_renew.mock;

import com.gazi.gazi_renew.issue.domain.Issue;
import com.gazi.gazi_renew.issue.domain.IssueStation;
import com.gazi.gazi_renew.issue.service.port.IssueStationRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeIssueStationRepository implements IssueStationRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<IssueStation> data = new ArrayList<>();
    @Override
    public List<IssueStation> findAllByStationId(Long stationId) {
        return data.stream()
                .filter(issueStation -> issueStation.getStation().getId().equals(stationId))
                .collect(Collectors.toList());
    }

    @Override
    public void save(IssueStation issueStation) {
        if (issueStation.getId() == null || issueStation.getId() == 0) {
            IssueStation createIssueStation = IssueStation.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .station(issueStation.getStation())
                    .issue(issueStation.getIssue())
                    .build();
            data.add(createIssueStation);
        }
        else{
            data.removeIf(issue1 -> Objects.equals(issue1.getId(), issueStation.getId()));
            data.add(issueStation);
        }
    }

    @Override
    public List<IssueStation> findAllByIssue(Issue issue) {
        return data.stream()
                .filter(issueStation -> issueStation.getIssue().getId().equals(issue.getId()))
                .collect(Collectors.toList());

    }
}
