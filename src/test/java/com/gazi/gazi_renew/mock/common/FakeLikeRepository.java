package com.gazi.gazi_renew.mock.common;

import com.gazi.gazi_renew.issue.domain.Like;
import com.gazi.gazi_renew.issue.service.port.LikeRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeLikeRepository implements LikeRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<Like> data = new ArrayList<>();


    @Override
    public Optional<Like> findByIssueAndMember(Long issueId, Long memberId) {
        return data.stream()
                .filter(like -> like.getIssueId().equals(issueId))
                .filter(like -> like.getMemberId().equals(memberId))
                .findFirst();
    }

    @Override
    public boolean existsByIssueAndMember(Long issueId, Long memberId) {
        return data.stream()
                .anyMatch(like -> like.getIssueId().equals(issueId) && like.getMemberId().equals(memberId));
    }

    @Override
    public Like save(Like like) {
        if (like.getId() == null || like.getId() == 0) {
            Like createLike = Like.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .issueId(like.getIssueId())
                    .build();
            data.add(createLike);
            return createLike;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), like.getId()));
            data.add(like);
            return like;
        }
    }

    @Override
    public void delete(Like like) {
        data.removeIf(existingLike -> existingLike.getId().equals(like.getId()));
    }
}
