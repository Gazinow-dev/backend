package com.gazi.gazi_renew.mock.issue;

import com.gazi.gazi_renew.issue.domain.Issue;
import com.gazi.gazi_renew.issue.domain.IssueLine;
import com.gazi.gazi_renew.issue.service.port.IssueLineRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeIssueLineRepository implements IssueLineRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<IssueLine> data = new ArrayList<>();
    @Override
    public Page<Issue> findByLineId(Long id, Pageable pageable) {
        // 1. lineId로 필터링
        List<Issue> filteredIssues = data.stream()
                .filter(issueLine -> issueLine.getLine().getId().equals(id)) // lineId가 같은 데이터를 필터링
                .map(IssueLine::getIssue) // IssueLine에서 Issue를 추출
                .sorted(Comparator.comparing(Issue::getStartDate).reversed()) // startDate를 기준으로 내림차순 정렬
                .collect(Collectors.toList());

        // 2. 페이징 처리
        int start = (int) pageable.getOffset();
        int end = Math.min(start + pageable.getPageSize(), filteredIssues.size());

        // 3. Page 객체로 반환
        return new PageImpl<>(
                filteredIssues.subList(start, end), // 요청한 페이지만큼 자르기
                pageable,
                filteredIssues.size() // 전체 개수
        );
    }


    @Override
    public void save(IssueLine issueLine) {
        if (issueLine.getId() == null || issueLine.getId() == 0) {
            IssueLine createIssueLine = IssueLine.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .line(issueLine.getLine())
                    .issue(issueLine.getIssue())
                    .build();
            data.add(createIssueLine);
        }
        else{
            data.removeIf(issue1 -> Objects.equals(issue1.getId(), issueLine.getId()));
            data.add(issueLine);
        }
    }
    @Override
    public List<IssueLine> findAllByIssue(Issue issue) {
        return data.stream().filter(issueLine -> issueLine.getIssue().getId().equals(issue.getId()))
                .collect(Collectors.toList());
    }

    @Override
    public void deleteIssueLineByIssueId(Long issueId) {
        data.removeIf(issueLine -> issueLine.getIssue().getId().equals(issueId));
    }
}
