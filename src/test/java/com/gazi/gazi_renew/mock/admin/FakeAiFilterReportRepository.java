package com.gazi.gazi_renew.mock.admin;

import com.gazi.gazi_renew.admin.domain.Penalty;
import com.gazi.gazi_renew.admin.domain.Report;
import com.gazi.gazi_renew.admin.domain.ReportStatus;
import com.gazi.gazi_renew.admin.domain.dto.AiFilterReport;
import com.gazi.gazi_renew.admin.service.port.AiFilterReportRepository;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeAiFilterReportRepository implements AiFilterReportRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<AiFilterReport> data = new ArrayList<>();
    @Override
    public AiFilterReport save(AiFilterReport aiFilterReport) {
        if (aiFilterReport.getId() == null || aiFilterReport.getId() == 0) {
            AiFilterReport result = AiFilterReport.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .issueTitle(aiFilterReport.getIssueTitle())
                    .issueContent(aiFilterReport.getIssueContent())
                    .aiFiltered(aiFilterReport.isAiFiltered())
                    .registered(aiFilterReport.isRegistered())
                    .failureReason(aiFilterReport.getFailureReason())
                    .build();

            data.add(result);
            return result;
        } else {
            data.removeIf(existing -> Objects.equals(existing.getId(), aiFilterReport.getId()));
            data.add(aiFilterReport);
            return aiFilterReport;
        }
    }

    @Override
    public List<AiFilterReport> getThisWeekReport(LocalDateTime startDate, LocalDateTime endDate) {
        List<AiFilterReport> result = new ArrayList<>();
        for (AiFilterReport report : data) {
            if (report.getCreatedAt() != null &&
                    !report.getCreatedAt().isBefore(startDate) &&
                    !report.getCreatedAt().isAfter(endDate)) {
                result.add(report);
            }
        }
        return result;
    }

}
