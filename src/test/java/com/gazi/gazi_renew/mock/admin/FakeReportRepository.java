package com.gazi.gazi_renew.mock.admin;

import com.gazi.gazi_renew.admin.domain.Report;
import com.gazi.gazi_renew.admin.domain.ReportStatus;
import com.gazi.gazi_renew.admin.domain.SanctionCriteria;
import com.gazi.gazi_renew.admin.service.port.ReportRepository;


import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeReportRepository implements ReportRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Report> data = new ArrayList<>();

    @Override
    public Report save(Report report) {
        if (report.getReportId() == null || report.getReportId() == 0) {
            Report result = Report.builder()
                    .reportId(autoGeneratedId.incrementAndGet())
                    .reporterMemberId(report.getReporterMemberId())
                    .reportedMemberId(report.getReportedMemberId())
                    .issueCommentId(report.getIssueCommentId())
                    .reportReason(report.getReportReason())
                    .reasonDescription(report.getReasonDescription())
                    .reportedAt(report.getReportedAt())
                    .reportStatus(ReportStatus.PENDING)
                    .sanctionCriteria(report.getSanctionCriteria())
                    .build();

            data.add(result);
            return result;
        } else {
            data.removeIf(existing -> Objects.equals(existing.getReportId(), report.getReportId()));
            data.add(report);
            return report;
        }
    }

    @Override
    public Optional<Report> findByReportId(Long reportId) {
        return data.stream().filter(report -> report.getReportId().equals(reportId))
                .findFirst();
    }

    @Override
    public void updateReportStatus(Report report) {
        data.removeIf(existingReport -> Objects.equals(existingReport.getReportId(), report.getReportId()));

        Report result = Report.builder()
                .reportId(report.getReportId())
                .reporterMemberId(report.getReporterMemberId())
                .reportedMemberId(report.getReportedMemberId())
                .issueCommentId(report.getIssueCommentId())
                .reportReason(report.getReportReason())
                .reasonDescription(report.getReasonDescription())
                .reportedAt(report.getReportedAt())
                .reportStatus(report.getReportStatus())
                .build();

        data.add(result);
    }

    @Override
    public int countByReportedMemberIdAndSanctionCriteria(Long reportedMemberId, SanctionCriteria sanctionCriteriaValue) {
        return (int) data.stream()
                .filter(report -> report.getReportedMemberId().equals(reportedMemberId))
                .filter(report -> report.getSanctionCriteria().equals(sanctionCriteriaValue))
                .count();
    }
    
    @Override
    public boolean existsByIssueCommentIdAndReporterMemberId(Long issueCommentId, Long reporterMemberId) {
        return data.stream()
                .anyMatch(report -> report.getIssueCommentId().equals(issueCommentId) && report.getReporterMemberId().equals(reporterMemberId));
    }
}
