package com.gazi.gazi_renew.mock;

import com.gazi.gazi_renew.member.domain.Member;
import com.gazi.gazi_renew.member.service.port.MemberRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMemberRepository implements MemberRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Member> data = new ArrayList<>();
    @Override
    public Optional<Member> findByEmail(String email) {
        return data.stream().filter(member -> member.getEmail().equals(email)).findAny();
    }

    @Override
    public boolean existsByEmail(String email) {
        return data.stream().anyMatch(member -> member.getEmail().equals(email));
    }

    @Override
    public boolean existsByNickName(String nickName) {
        return data.stream().anyMatch(member -> member.getNickName().equals(nickName));
    }

    @Override
    public Optional<Member> getReferenceByEmail(String email) {
        return data.stream()
                .filter(member -> member.getEmail().equals(email))
                .findFirst();
    }

    @Override
    public Optional<Member> findByEmailAndNickName(String email, String nickname) {
        return data.stream()
                .filter(member -> member.getEmail().equals(email))
                .filter(member -> member.getNickName().equals(nickname))
                .findAny();
    }

    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            Member createMember = Member.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(member.getEmail())
                    .password(member.getPassword())
                    .nickName(member.getNickName())
                    .role(member.getRole())
                    .pushNotificationEnabled(member.getPushNotificationEnabled())
                    .mySavedRouteNotificationEnabled(member.getMySavedRouteNotificationEnabled())
                    .firebaseToken(member.getFirebaseToken())
                    .build();
            data.add(createMember);
            return createMember;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
            return member;
        }
    }

    @Override
    public void delete(Member member) {
        data.removeIf(existingMember -> existingMember.getId().equals(member.getId()));
    }

    @Override
    public void updateFireBaseToken(Member member) {
        // 기존 멤버를 리스트에서 찾아 제거하고, 새로운 토큰을 가진 멤버를 추가하는 방식
        data.removeIf(existingMember -> existingMember.getId().equals(member.getId()));

        Member updatedMember = Member.builder()
                .id(member.getId())
                .email(member.getEmail())
                .password(member.getPassword())
                .nickName(member.getNickName())
                .provider(member.getProvider())
                .role(member.getRole())
                .pushNotificationEnabled(member.getPushNotificationEnabled())
                .mySavedRouteNotificationEnabled(member.getMySavedRouteNotificationEnabled())
                .firebaseToken(member.getFirebaseToken()) // 업데이트된 Firebase 토큰
                .createdAt(member.getCreatedAt())
                .build();

        data.add(updatedMember);
    }

    @Override
    public void updateNickname(Member member) {
        data.removeIf(existingMember -> existingMember.getId().equals(member.getId()));

        Member updatedMember = Member.builder()
                .id(member.getId())
                .email(member.getEmail())
                .password(member.getPassword())
                .nickName(member.getNickName()) // 업데이트된 닉네임
                .provider(member.getProvider())
                .role(member.getRole())
                .pushNotificationEnabled(member.getPushNotificationEnabled())
                .mySavedRouteNotificationEnabled(member.getMySavedRouteNotificationEnabled())
                .firebaseToken(member.getFirebaseToken())
                .createdAt(member.getCreatedAt())
                .build();

        data.add(updatedMember);
    }

    @Override
    public void updatePassword(Member member) {
        data.removeIf(existingMember -> existingMember.getId().equals(member.getId()));

        Member updatedMember = Member.builder()
                .id(member.getId())
                .email(member.getEmail())
                .password(member.getPassword())
                .nickName(member.getNickName())
                .provider(member.getProvider())
                .role(member.getRole())
                .pushNotificationEnabled(member.getPushNotificationEnabled())
                .mySavedRouteNotificationEnabled(member.getMySavedRouteNotificationEnabled())
                .firebaseToken(member.getFirebaseToken())
                .createdAt(member.getCreatedAt())
                .build();

        data.add(updatedMember);
    }

    @Override
    public void updateAlertAgree(Member member) {
        data.removeIf(existingMember -> existingMember.getId().equals(member.getId()));

        Member updatedMember = Member.builder()
                .id(member.getId())
                .email(member.getEmail())
                .password(member.getPassword())
                .nickName(member.getNickName())
                .provider(member.getProvider())
                .role(member.getRole())
                .pushNotificationEnabled(member.getPushNotificationEnabled())
                .mySavedRouteNotificationEnabled(member.getMySavedRouteNotificationEnabled())
                .firebaseToken(member.getFirebaseToken())
                .createdAt(member.getCreatedAt())
                .build();

        data.add(updatedMember);
    }

    @Override
    public Optional<Member> findById(Long id) {
        return data.stream()
                .filter(member -> member.getId().equals(id)).findFirst();
    }
}
